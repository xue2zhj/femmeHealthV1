<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Profile</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    .greeting {
      display: flex;
      align-items: center;
      margin: 5px 0px -15px 5px; /* Reduce margin for smaller height */
      padding: 5px; /* No padding to further reduce height */
    }
    .greeting i, .greeting img {
      margin-right: 10px; /* Add space between the icon/image and text */
    }

      /* Container for the avatar and notification */
      .avatar-container {
        position: relative;
        margin-right: 10px; /* Add space between avatar and text */
      }
  
      /* Style for the avatar icon */
      .avatar {
        font-size: 30px; /* Avatar size */
        color: #333;
      }
      
    /* Style for the notification circle */
    .notification-circle {
      position: absolute;
      top: -5px;
      right: 200px;
      background-color: red;
      color: white;
      border-radius: 50%;
      width: 12px;
      height: 12px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 8px;
    }

    /* Style for the settings icon */
    .settings-icon {
      font-size: 20px;
      cursor: pointer;
      color: #333;
    }

    /* Style for the help icon */
    .help-icon {
      position: absolute;
      top: 15px;
      right: 20px;
      font-size: 20px;
      cursor: pointer;
      color: #333;
      margin-left: 20px;
    }


     /* Dialog styling */
     .dialog-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }

    .dialog-box {
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      width: 400px;
    }

    /* Tabs styles */
    .tabs {
      display: flex;
      cursor: pointer;
    }

    .tabs div {
      flex: 1;
      padding: 10px;
      background-color: #f1f1f1;
      text-align: center;
      border: 1px solid #ddd;
    }

    .tabs div.active {
      background-color: #ddd;
    }

    .tab-content {
      display: none;
      margin-top: 20px;
    }

    .tab-content.active {
      display: block;
    }

    .dialog-box input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
    }

    .dialog-box button {
      padding: 10px 20px;
      cursor: pointer;
    }


     /* Styling the sliders */
     .slider-container {
      margin: 20px 0;
    }

    .slider {
      width: 100px;
    }

    .slider-label {
      margin-bottom: 5px;
      font-size: 16px;
    }

    .slider-value {
      margin-top: 10px;
      font-weight: bold;
    }

    /* Style for the plus icon */
    .plus-icon {
      font-size: 20px;
      cursor: pointer;
      color: #333;
    }




  </style>

</head>
<body>
  <!-- <h1  id="greeting">Welcome, <b><%= user.name %></b>!</h1> -->
  <div class="greeting">
    <div class="avatar-container" onclick="openPredictDialog()">
    &nbsp;&nbsp;<i class="fas fa-user-circle" style="font-size: 30px;"></i> <div class="notification-circle">!</div><!-- Font Awesome avatar icon -->
     Good Morning, <b><%= user.name %></b> ! </div>

     <!-- Right: Plus icon -->
    <i class="fas fa-plus plus-icon" onclick="openDialog()"></i> <!-- Plus icon -->
     <!-- Right: Settings icon 
    <i class="fas fa-cog settings-icon" onclick="openDialog()"></i>

    
    -->

     <!-- Help Icon that redirects to /relate -->
     <i class="fas fa-question-circle help-icon" onclick="redirectToRelate()"></i> <!-- Help icon -->
 
  </div>


<!-- Dialog Overlay with Tabs -->
<div id="dialog-overlay" class="dialog-overlay">
  <div class="dialog-box">
    <h3>Manage Your Period Info</h3>

    <!-- Tabs -->
    <div class="tabs">
      <div class="tab" onclick="openTab(event, 'cycle')">Cycle Tracking</div>
      <div class="tab" onclick="openTab(event, 'symptoms')">Symptoms</div>
      <div class="tab" onclick="openTab(event, 'health')">Health Info</div>
    </div>

    <!-- Tab Content -->
    <div id="cycle" class="tab-content">
      <h4>Cycle Tracking</h4>
      <form>
        <label for="last-period">Last Period Date:</label>
        <input type="date" id="last-period" name="last-period" required>

        <label for="cycle-length">Cycle Length (days):</label>
        <input type="number" id="cycle-length" name="cycle-length" placeholder="Enter cycle length" required>
      </form>
    </div>

    <div id="symptoms" class="tab-content">
      <h4>Symptoms</h4>
       <form>
        <label for="cramps">Cramps (1-10):</label>
        <input type="number" id="cramps" name="cramps" min="1" max="10" required>

        <label for="mood">Mood (1-10):</label>
        <input type="number" id="mood" name="mood" min="1" max="10" required>
      </form> 

    </div>

    <div id="health" class="tab-content">
      <h4>Health Info</h4>
      <!-- <form>
        <label for="height">Height (cm):</label>
        <input type="number" id="height" name="height" placeholder="Enter height" required>

        <label for="weight">Weight (kg):</label>
        <input type="number" id="weight" name="weight" placeholder="Enter weight" required>
      </form> -->
      <!-- Height Slider -->
      <div class="slider-container">
        <div class="slider-label">Height (cm):</div>
        <input type="range" min="100" max="250" value="170" class="slider" id="height-slider" oninput="updateHeight()">
        <div class="slider-value" id="height-value">170 cm</div>
      </div>

      <!-- Weight Slider -->
      <div class="slider-container">
        <div class="slider-label">Weight (kg):</div>
        <input type="range" min="30" max="150" value="65" class="slider" id="weight-slider" oninput="updateWeight()">
        <div class="slider-value" id="weight-value">65 kg</div>
      </div>

    </div>
    
    <button type="button" onclick="closeDialog()">Add</button>
  </div>
</div>


<!-- Dialog Overlay -->
<div id="dialog-overlay-predict" class="dialog-overlay" style="height:600px">
  <div class="dialog-box">
    <!-- Iframe content -->
    <div class="iframe-container">
      <iframe src="/index.html" width="100%" height="100%" frameborder="0"></iframe>
    </div>
    <button type="button" onclick="closePredictDialog()">Close</button>
  </div>
</div>


  <!-- <p>Age: <%= user.age %> &nbsp;&nbsp;&nbsp;&nbsp; <%= user.profession %></p> -->
  <ul  class="alert-list">
    <% user.alerts.forEach(function(alert){ %>
      <li><%= alert %></li>
    <% }) %>
  </ul>
  <ul>
    <% user.hobbies.forEach(function(hobby){ %>
      <li><%= hobby %></li>
    <% }) %>
  </ul>

  <div class="button-container">
    <button id="monthlyBtn">Month</button>
    <button id="weeklyBtn">Week</button>
    <button id="dailyBtn">Day</button>
</div>
  <!-- 这是一个曲线图的占位符，可以用其他 JavaScript 库或框架生成图表 -->
  <div id="curve-chart">
    <canvas id="myChart" width="400" height="200"></canvas>
  </div>

  <!-- 嵌入 knowledge.html -->
  <h2>&nbsp;&nbsp;Menstrual Flow</h2>
  <iframe src="/knowledge.html" width="100%" height="500px"></iframe>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // 使用 Chart.js 绘制曲线图
    var ctx = document.getElementById('myChart').getContext('2d');
    
     // Define monthly data
     var monthlyData = {
        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October'],
        datasets: [
          {
            label: 'Volume(ml)',
            data: [65, 59, 80, 81, 56, 55, 40, 70, 65, 77],
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            fill: false,
            yAxisID: 'y'
          },
          {
            label: 'Cramping',
            data: [1, 2, 1, 2, 3, 3, 4, 4, 3, 2],
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            type: 'bar',
            yAxisID: 'y1'
          }
        ]
      };

    // Define weekly data
    var weeklyData = {
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
        datasets: [
          {
            label: 'Volume(ml)',
            data: [75, 60, 85, 90],
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            fill: false,
            yAxisID: 'y'
          },
          {
            label: 'Cramping',
            data: [1, 1, 2, 2],
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            type: 'bar',
            yAxisID: 'y1'
          }
        ]
      };

    
      // Define weekly data
    var dailyData = {
        labels: ['Sunday', 'Monday', 'Tuesday', 'Wedsday', 'Tursday', 'Friday','Saturday'],
        datasets: [
          {
            label: 'Volume(ml)',
            data: [75, 60, 85, 90, 75, 60, 85],
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            fill: false,
            yAxisID: 'y'
          },
          {
            label: 'Cramping',
            data: [1, 1, 2, 0, 1, 0,0],
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            type: 'bar',
            yAxisID: 'y1'
          }
        ]
      };


    
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August','September','October'],
            datasets: [{
                label: 'Volume(ml)',
                data: [65, 59, 80, 81, 56, 55, 40,70,65,77],
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 2,
                fill: false,
                yAxisID: 'y', // Use the left y-axis
            },
          {
            label: 'Cramping', // Cramping data (Bar)
            data: [1, 2, 1, 2, 3, 3, 4, 4, 3, 2],
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            type: 'bar', // Set the type to bar for cramping data
            yAxisID: 'y1', // Use the right y-axis
          }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    position: 'left', // Left y-axis for Activity
                    title: {
                      display: true,
                      text: 'Activity'
                    }
                  },
                  y1: {
                    beginAtZero: true,
                    position: 'right', // Right y-axis for Cramping
                    max: 40, // Set the maximum to 40
                    ticks: {
                    stepSize: 5, // Set the interval between ticks
                        callback: function(value) {
                            return Number(value).toFixed(0); // Remove decimal points
                        }
                    },
                    grid: {
                      drawOnChartArea: false // Prevent grid lines from overlapping
                    },
                    title: {
                      display: true,
                      text: 'Cramping'
                    }
                  }
                }
            
        }
        
    });

           // Function to update chart data
           function updateChartData(chart, newData) {
            chart.data = newData;
            chart.update();
        }

    // Event listeners for buttons
    document.getElementById('monthlyBtn').addEventListener('click', function() {
        updateChartData(myChart, monthlyData);
      });
  
      document.getElementById('weeklyBtn').addEventListener('click', function() {
        updateChartData(myChart, weeklyData);
      });

      document.getElementById('dailyBtn').addEventListener('click', function() {
        updateChartData(myChart, dailyData);
      });


      function getGreeting() {
        const currentHour = new Date().getHours();
  
        if (currentHour < 12) {
          return 'Good Morning';
        } else if (currentHour < 18) {
          return 'Good Afternoon';
        } else {
          return 'Good Evening';
        }
      }

      // Update the greeting in the HTML
    document.addEventListener('DOMContentLoaded', function() {
        const userName = '<%= user.name %>';
        const greetingMessage = getGreeting();
        const greetingElement = document.getElementById('greeting');
        
        greetingElement.textContent = `${greetingMessage}, ${userName}!`;
      });

// Function to open the dialog
function openDialog() {
  document.getElementById('dialog-overlay').style.display = 'flex';
}

// Function to close the dialog
function closeDialog() {
  document.getElementById('dialog-overlay').style.display = 'none';
}

// Function to close the dialog
function closePredictDialog() {
  document.getElementById('dialog-overlay-predict').style.display = 'none';
}

// Function to open a specific tab
function openTab(event, tabName) {
  var i, tabcontent, tabs;

  // Hide all tab content
  tabcontent = document.getElementsByClassName("tab-content");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
    tabcontent[i].classList.remove("active");
  }

  // Remove active class from all tabs
  tabs = document.getElementsByClassName("tab");
  for (i = 0; i < tabs.length; i++) {
    tabs[i].classList.remove("active");
  }

  // Show the selected tab and add active class to the clicked tab
  document.getElementById(tabName).style.display = "block";
  document.getElementById(tabName).classList.add("active");
  event.currentTarget.classList.add("active");
}

// Open the first tab by default
document.addEventListener("DOMContentLoaded", function () {
  document.getElementsByClassName("tab")[0].click();
});


// Function to update height value
function updateHeight() {
  var height = document.getElementById('height-slider').value;
  document.getElementById('height-value').textContent = height + ' cm';
}

// Function to update weight value
function updateWeight() {
  var weight = document.getElementById('weight-slider').value;
  document.getElementById('weight-value').textContent = weight + ' kg';
}


function redirectToRelate() {
  window.location.href = '/relate';
}

 // Function to open the dialog
 function openPredictDialog() {
  document.getElementById('dialog-overlay-predict').style.display = 'flex';
}

  </script>
</body>
</html>
